{"version":3,"sources":["constants/irregularVerbs.js","views/IrregularVerbs/index.js","App.js","reportWebVitals.js","index.js"],"names":["Levels","LevelsDictionary","Map","name","IrregularVerbs","theme","useTheme","useForm","reValidateMode","register","handleSubmit","control","getValues","reset","useFieldArray","keyName","fields","append","dictionary","ref","React","useRef","useMemo","getUnusedIds","Dictionary","map","_","index","filter","id","current","indexOf","get","available","length","Math","floor","random","push","useDictionary","useState","level","setLevel","fieldErrors","setFieldErrors","isSm","useMediaQuery","breakpoints","down","amountUnusedVerbs","resetForm","useCallback","words","Array","onSubmit","values","word","reduce","acc","t","toLowerCase","trim","useEffect","callback","e","keyCode","preventDefault","document","addEventListener","removeEventListener","Typography","variant","ButtonGroup","size","color","style","marginTop","entries","Button","disabled","onClick","Grid","container","alignItems","item","md","xs","direction","spacing","justify","marginBottom","textAlign","paddingBottom","field","verb","undefined","type","typeIndex","error","title","translation","TextField","label","infinitive","inputRef","fullWidth","autoComplete","InputProps","endAdornment","InputAdornment","position","Check","fieldId","background","zIndex","bottom","top","Refresh","Add","App","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"4VAAaA,EACN,EAKMC,EAAmB,IAAIC,IAAI,CACtC,CAACF,EAAY,CAAEG,KAAM,QACrB,CANK,EAMQ,CAAEA,KAAM,QACrB,CANM,EAMQ,CAAEA,KAAM,WAifTC,EA7eQ,CACrB,CACE,WAAc,SACd,OAAU,SACV,WAAc,SACd,MAAS,EACT,YAAe,kCAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,QACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,SACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,QACd,OAAU,UACV,WAAc,UACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,QACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,MACd,OAAU,SACV,WAAc,SACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,QACd,OAAU,SACV,WAAc,SACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,SACd,OAAU,QACV,WAAc,SACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,0DAEjB,CACE,WAAc,MACd,OAAU,MACV,WAAc,MACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,KACd,OAAU,MACV,WAAc,OACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,QACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,QACd,MAAS,EACT,YAAe,4BAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,SACd,MAAS,EACT,YAAe,8EAEjB,CACE,WAAc,MACd,OAAU,MACV,WAAc,QACd,MAAS,EACT,YAAe,4BAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,SACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,OACd,OAAU,MACV,WAAc,MACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,sEAEjB,CACE,WAAc,QACd,OAAU,SACV,WAAc,SACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,OACd,OAAU,QACV,WAAc,QACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,MACd,OAAU,OACV,WAAc,QACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,SACd,OAAU,SACV,WAAc,YACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,UACd,OAAU,UACV,WAAc,WACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,MACd,OAAU,MACV,WAAc,SACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,QACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,KACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,4BAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,QACd,MAAS,EACT,YAAe,kCAEjB,CACE,WAAc,OACd,OAAU,MACV,WAAc,MACd,MAAS,EACT,YAAe,kCAEjB,CACE,WAAc,OACd,OAAU,QACV,WAAc,QACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,OACd,OAAU,MACV,WAAc,SACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,MACd,OAAU,MACV,WAAc,MACd,MAAS,EACT,YAAe,4BAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,2GAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,QACd,MAAS,EACT,YAAe,kCAEjB,CACE,WAAc,QACd,OAAU,UACV,WAAc,UACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,QACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,wEAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,OACd,OAAU,QACV,WAAc,QACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,OACd,OAAU,MACV,WAAc,MACd,MAAS,EACT,YAAe,sEAEjB,CACE,WAAc,MACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,MACd,OAAU,MACV,WAAc,MACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,SACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,QACd,MAAS,EACT,YAAe,sEAEjB,CACE,WAAc,MACd,OAAU,MACV,WAAc,MACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,MACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,MACd,OAAU,MACV,WAAc,OACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,0DAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,0DAEjB,CACE,WAAc,MACd,OAAU,MACV,WAAc,MACd,MAAS,EACT,YAAe,gEAEjB,CACE,WAAc,OACd,OAAU,SACV,WAAc,QACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,4BAEjB,CACE,WAAc,MACd,OAAU,MACV,WAAc,MACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,QACd,MAAS,EACT,YAAe,kCAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,SACd,MAAS,EACT,YAAe,kFAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,QACd,MAAS,EACT,YAAe,0DAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,QACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,SACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,QACd,MAAS,EACT,YAAe,kCAEjB,CACE,WAAc,QACd,OAAU,SACV,WAAc,SACd,MAAS,EACT,YAAe,kCAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,gEAEjB,CACE,WAAc,QACd,OAAU,UACV,WAAc,UACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,SACd,MAAS,EACT,YAAe,8CAEjB,CACE,WAAc,aACd,OAAU,aACV,WAAc,aACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,OACd,OAAU,OACV,WAAc,OACd,MAAS,EACT,YAAe,wCAEjB,CACE,WAAc,MACd,OAAU,MACV,WAAc,MACd,MAAS,EACT,YAAe,oDAEjB,CACE,WAAc,QACd,OAAU,QACV,WAAc,UACd,MAAS,EACT,YAAe,iEC9QJA,EA5LQ,WACrB,IAAMC,EAAQC,cADa,EAEmCC,YAAQ,CACpEC,eAAgB,aADVC,EAFmB,EAEnBA,SAAUC,EAFS,EAETA,aAAcC,EAFL,EAEKA,QAASC,EAFd,EAEcA,UAAWC,EAFzB,EAEyBA,MAFzB,EAKAC,YAAc,CACvCX,KAAM,QACNQ,UACAI,QAAS,YAHHC,EALmB,EAKnBA,OAAQC,EALW,EAKXA,OAMVC,EArCc,WACpB,IAAMC,EAAMC,IAAMC,OAAO,IACzB,OAAOD,IAAME,SAAQ,WACnB,IAAMC,EAAe,WACnB,OAAOC,EAAWC,KAAI,SAACC,EAAGC,GAAJ,OAAcA,KAAOC,QACzC,SAACC,GAAD,OAAqC,IAA7BV,EAAIW,QAAQC,QAAQF,OAWhC,MAAO,CACLG,IATU,WACV,IAAMC,EAAYV,IAClB,GAAIU,EAAUC,OAAQ,CACpB,IAAML,EAAKI,EAAUE,KAAKC,MAAMH,EAAUC,OAASC,KAAKE,WAExD,OADAlB,EAAIW,QAAQQ,KAAKT,GACVA,IAKTN,eACAV,MAAO,WACLM,EAAIW,QAAU,OAGjB,IAcgBS,GAXQ,EAYDnB,IAAMoB,SAASxC,GAZd,mBAYpByC,EAZoB,KAYbC,EAZa,OAaWtB,IAAMoB,SAAS,IAb1B,mBAapBG,EAboB,KAaPC,EAbO,KAcrBC,EAAOC,YAAczC,EAAM0C,YAAYC,KAAK,OAClCC,EAAsB/B,EAAWK,eAAzCW,OACFgB,EAAYC,uBAAY,WAC5BjC,EAAWL,QACX+B,EAAe,IACf/B,EAAM,CACJuC,MAAO,YAAI,IAAIC,MAAM,IAAI5B,KAAI,iBAAO,CAAEI,GAAIX,EAAWc,cAEtD,CAACnB,EAAOK,IAELoC,EAAW5C,GAAa,WAAO,IAAD,EAC5B6C,EAAS3C,KACf,UAAI2C,EAAOH,aAAX,aAAI,EAAclB,SAChBU,EACEW,EAAOH,MAAM3B,KAAI,SAAC+B,EAAM7B,GAAW,IAEpBE,EACTb,EADDW,GAAUE,GAEb,MAAO,CAAC,SAAU,cAAc4B,QAAO,SAACC,EAAKC,GAI3C,OAHIH,EAAKG,KACPD,EAAIC,GAAKH,EAAKG,GAAGC,cAAcC,SAAWrC,EAAWK,GAAI8B,IAEpDD,IACN,WAMXtC,IAAM0C,WAAU,WACdZ,MACC,CAACT,EAAOS,IAEX9B,IAAM0C,WAAU,WACd,IAAMC,EAAW,SAACC,GACE,KAAdA,EAAEC,UACJD,EAAEE,iBACFZ,MAIJ,OADAa,SAASC,iBAAiB,WAAYL,GAC/B,kBAAMI,SAASE,oBAAoB,WAAYN,MACrD,CAACT,IAMJ,OACE,qCACE,cAACgB,EAAA,EAAD,CAAYC,QAAQ,KAApB,6BACA,cAACC,EAAA,EAAD,CAAaC,KAAK,QAAQC,MAAM,UAAUC,MAAO,CAAEC,UAAW,IAA9D,SACG,YAAI3E,EAAiB4E,WAAWpD,KAAI,YAAqB,IAAD,mBAAlBI,EAAkB,KAAZ1B,EAAY,KAAZA,KAC3C,OACE,eAAC2E,EAAA,EAAD,CACEC,SAAUlD,IAAOY,EACjBuC,QAAS,kBAAMtC,EAASb,IAF1B,mBAKS1B,IAFF0B,QAOb,cAACoD,EAAA,EAAD,CAAMC,WAAS,EAACC,WAAW,aAA3B,SACE,cAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,GAAvB,SACE,eAACL,EAAA,EAAD,CACEC,WAAS,EACTK,UAAW1C,EAAO,SAAW,MAC7BsC,WAAW,aACXK,QAAS,EACTb,MAAO,CAAEC,UAAW,IALtB,UAOE,cAACK,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,EAAf,SACE,eAACJ,EAAA,EAAD,CACEC,WAAS,EACTK,UAAU,MACVE,QAAQ,aACRN,WAAW,SACXK,QAAS,EACTb,MAAO,CAAEe,aAAc,IANzB,UAQE,cAACT,EAAA,EAAD,CACEG,MAAI,EACJE,GAAI,EACJX,MAAO,CAAEgB,UAAW,QAASC,cAAe,GAH9C,SAKE,cAACtB,EAAA,EAAD,CAAYC,QAAQ,QAApB,2BAEF,cAACU,EAAA,EAAD,CACEG,MAAI,EACJE,GAAI,EACJX,MAAO,CAAEgB,UAAW,QAASC,cAAe,GAH9C,SAKE,cAACtB,EAAA,EAAD,CAAYC,QAAQ,QAApB,+BApBJ,OAsBGvD,QAtBH,IAsBGA,OAtBH,EAsBGA,EAAQS,KAAI,SAACoE,EAAOlE,GACnB,IAAMmE,EAAOtE,EAAWqE,EAAMhE,IAC9B,YAAgBkE,IAATD,EACH,KACA,CAAC,SAAU,cAAcrE,KAAI,SAACuE,EAAMC,GAAe,IAAD,EAC1CC,EAAK,UAAGvD,EAAYhB,UAAf,aAAG,EAAqBqE,GACnC,OACE,cAACf,EAAA,EAAD,CACEG,MAAI,EACJE,GAAI,EACJa,MAAOL,EAAKM,YAHd,SAME,cAACC,EAAA,EAAD,CACElG,KAAI,gBAAWwB,EAAX,aAAqBqE,GACzBM,MAAqB,IAAdL,EAAkBH,EAAKS,WAAa,KAC3ChC,QAAQ,WACR2B,MAAOA,EACPM,SAAU/F,EACVgG,WAAS,EACThC,KAAK,QACLM,UAAoB,IAAVmB,EACVQ,aAAa,MACbC,WAAY,CACVC,cACY,IAAVV,EACE,cAACW,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SACE,cAACC,EAAA,EAAD,MAEA,SAtBZ,UAIUlB,EAAMmB,QAJhB,YAI2BhB,eA2BzC,eAACf,EAAA,EAAD,CACEG,MAAI,EACJC,GAAI,EACJV,MAAK,aACHsC,WAAY,QACZC,OAAQ,IACJrE,EACA,CAAEiE,SAAU,QAASK,OAAQ,IAC7B,CAAEL,SAAU,SAAUM,IAAK,KARnC,UAWE,eAAC5C,EAAA,EAAD,CAAaC,KAAK,QAAQF,QAAQ,YAAYG,MAAM,YAApD,UACE,cAACI,EAAA,EAAD,CAAQE,QAAS1B,EAAjB,SACE,cAACyD,EAAA,EAAD,MAEF,cAACjC,EAAA,EAAD,CAAQE,QAAS9B,EAAjB,SACE,cAACmE,EAAA,EAAD,MAEF,cAACvC,EAAA,EAAD,CAAQE,QA5GL,WACf/D,EAAO,CAAEY,GAAIX,EAAWc,QAAS,IA2GM+C,SAAgC,IAAtB9B,EAArC,SACE,cAACqE,EAAA,EAAD,SAGFzE,EASE,KARF,sBAAK8B,MAAO,CAAEC,UAAW,IAAzB,UACE,eAACN,EAAA,EAAD,CAAYC,QAAQ,QAApB,6BACkB,wCADlB,eAGA,eAACD,EAAA,EAAD,CAAYC,QAAQ,QAApB,qDAC0C,gEC9M7CgD,MAVf,WACE,OACE,cAAC,IAAD,UACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAOC,KAAK,mBAAmBC,UAAWrH,SCInCsH,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlE,SAASmE,eAAe,SAM1BZ,M","file":"static/js/main.40767999.chunk.js","sourcesContent":["export const Levels = {\n  one: 0,\n  two: 1,\n  tree: 2,\n};\n\nexport const LevelsDictionary = new Map([\n  [Levels.one, { name: \"One\" }],\n  [Levels.two, { name: \"Two\" }],\n  [Levels.tree, { name: \"Tree\" }],\n]);\n\n// prettier-ignore\nconst IrregularVerbs = [\n  {\n    \"infinitive\": \"become\",\n    \"simple\": \"became\",\n    \"participle\": \"become\",\n    \"level\": 0,\n    \"translation\": \"стали\"\n  },\n  {\n    \"infinitive\": \"begin\",\n    \"simple\": \"began\",\n    \"participle\": \"begun\",\n    \"level\": 0,\n    \"translation\": \"начать\"\n  },\n  {\n    \"infinitive\": \"break\",\n    \"simple\": \"broke\",\n    \"participle\": \"broken\",\n    \"level\": 0,\n    \"translation\": \"сломать\"\n  },\n  {\n    \"infinitive\": \"bring\",\n    \"simple\": \"brought\",\n    \"participle\": \"brought\",\n    \"level\": 0,\n    \"translation\": \"принести\"\n  },\n  {\n    \"infinitive\": \"build\",\n    \"simple\": \"built\",\n    \"participle\": \"built\",\n    \"level\": 0,\n    \"translation\": \"строить\"\n  },\n  {\n    \"infinitive\": \"buy\",\n    \"simple\": \"bought\",\n    \"participle\": \"bought\",\n    \"level\": 0,\n    \"translation\": \"купить\"\n  },\n  {\n    \"infinitive\": \"catch\",\n    \"simple\": \"caught\",\n    \"participle\": \"caught\",\n    \"level\": 0,\n    \"translation\": \"поймать\"\n  },\n  {\n    \"infinitive\": \"choose\",\n    \"simple\": \"chose\",\n    \"participle\": \"chosen\",\n    \"level\": 0,\n    \"translation\": \"выберите\"\n  },\n  {\n    \"infinitive\": \"come\",\n    \"simple\": \"came\",\n    \"participle\": \"come\",\n    \"level\": 0,\n    \"translation\": \"прийти\"\n  },\n  {\n    \"infinitive\": \"cost\",\n    \"simple\": \"cost\",\n    \"participle\": \"cost\",\n    \"level\": 0,\n    \"translation\": \"стоимость\"\n  },\n  {\n    \"infinitive\": \"cut\",\n    \"simple\": \"cut\",\n    \"participle\": \"cut\",\n    \"level\": 0,\n    \"translation\": \"вырезать\"\n  },\n  {\n    \"infinitive\": \"do\",\n    \"simple\": \"did\",\n    \"participle\": \"done\",\n    \"level\": 0,\n    \"translation\": \"делать\"\n  },\n  {\n    \"infinitive\": \"draw\",\n    \"simple\": \"drew\",\n    \"participle\": \"drawn\",\n    \"level\": 0,\n    \"translation\": \"рисовать\"\n  },\n  {\n    \"infinitive\": \"drink\",\n    \"simple\": \"drank\",\n    \"participle\": \"drunk\",\n    \"level\": 0,\n    \"translation\": \"пить\"\n  },\n  {\n    \"infinitive\": \"drive\",\n    \"simple\": \"drove\",\n    \"participle\": \"driven\",\n    \"level\": 0,\n    \"translation\": \"водить(машину)\"\n  },\n  {\n    \"infinitive\": \"eat\",\n    \"simple\": \"ate\",\n    \"participle\": \"eaten\",\n    \"level\": 0,\n    \"translation\": \"есть\"\n  },\n  {\n    \"infinitive\": \"fall\",\n    \"simple\": \"fell\",\n    \"participle\": \"fallen\",\n    \"level\": 0,\n    \"translation\": \"падать\"\n  },\n  {\n    \"infinitive\": \"feed\",\n    \"simple\": \"fed\",\n    \"participle\": \"fed\",\n    \"level\": 0,\n    \"translation\": \"кормить\"\n  },\n  {\n    \"infinitive\": \"feel\",\n    \"simple\": \"felt\",\n    \"participle\": \"felt\",\n    \"level\": 0,\n    \"translation\": \"чувствовать\"\n  },\n  {\n    \"infinitive\": \"fight\",\n    \"simple\": \"fought\",\n    \"participle\": \"fought\",\n    \"level\": 0,\n    \"translation\": \"бороться\"\n  },\n  {\n    \"infinitive\": \"find\",\n    \"simple\": \"found\",\n    \"participle\": \"found\",\n    \"level\": 0,\n    \"translation\": \"находить\"\n  },\n  {\n    \"infinitive\": \"fly\",\n    \"simple\": \"flew\",\n    \"participle\": \"flown\",\n    \"level\": 0,\n    \"translation\": \"летать\"\n  },\n  {\n    \"infinitive\": \"forget\",\n    \"simple\": \"forgot\",\n    \"participle\": \"forgotten\",\n    \"level\": 0,\n    \"translation\": \"забыть\"\n  },\n  {\n    \"infinitive\": \"forgive\",\n    \"simple\": \"forgave\",\n    \"participle\": \"forgiven\",\n    \"level\": 0,\n    \"translation\": \"простить\"\n  },\n  {\n    \"infinitive\": \"get\",\n    \"simple\": \"got\",\n    \"participle\": \"gotten\",\n    \"level\": 0,\n    \"translation\": \"получить\"\n  },\n  {\n    \"infinitive\": \"give\",\n    \"simple\": \"gave\",\n    \"participle\": \"given\",\n    \"level\": 0,\n    \"translation\": \"давать\"\n  },\n  {\n    \"infinitive\": \"go\",\n    \"simple\": \"went\",\n    \"participle\": \"gone\",\n    \"level\": 0,\n    \"translation\": \"идти\"\n  },\n  {\n    \"infinitive\": \"grow\",\n    \"simple\": \"grew\",\n    \"participle\": \"grown\",\n    \"level\": 0,\n    \"translation\": \"расти\"\n  },\n  {\n    \"infinitive\": \"have\",\n    \"simple\": \"had\",\n    \"participle\": \"had\",\n    \"level\": 0,\n    \"translation\": \"иметь\"\n  },\n  {\n    \"infinitive\": \"hear\",\n    \"simple\": \"heard\",\n    \"participle\": \"heard\",\n    \"level\": 0,\n    \"translation\": \"слышать\"\n  },\n  {\n    \"infinitive\": \"hide\",\n    \"simple\": \"hid\",\n    \"participle\": \"hidden\",\n    \"level\": 0,\n    \"translation\": \"скрывать\"\n  },\n  {\n    \"infinitive\": \"hit\",\n    \"simple\": \"hit\",\n    \"participle\": \"hit\",\n    \"level\": 0,\n    \"translation\": \"бить\"\n  },\n  {\n    \"infinitive\": \"hold\",\n    \"simple\": \"held\",\n    \"participle\": \"held\",\n    \"level\": 0,\n    \"translation\": \"держать/удерживать\"\n  },\n  {\n    \"infinitive\": \"know\",\n    \"simple\": \"knew\",\n    \"participle\": \"known\",\n    \"level\": 0,\n    \"translation\": \"знать\"\n  },\n  {\n    \"infinitive\": \"learn\",\n    \"simple\": \"learned\",\n    \"participle\": \"learned\",\n    \"level\": 0,\n    \"translation\": \"учиться\"\n  },\n  {\n    \"infinitive\": \"leave\",\n    \"simple\": \"left\",\n    \"participle\": \"left\",\n    \"level\": 0,\n    \"translation\": \"покидать\"\n  },\n  {\n    \"infinitive\": \"lend\",\n    \"simple\": \"lent\",\n    \"participle\": \"lent\",\n    \"level\": 0,\n    \"translation\": \"давать в долг\"\n  },\n  {\n    \"infinitive\": \"lose\",\n    \"simple\": \"lost\",\n    \"participle\": \"lost\",\n    \"level\": 0,\n    \"translation\": \"терять\"\n  },\n  {\n    \"infinitive\": \"make\",\n    \"simple\": \"made\",\n    \"participle\": \"made\",\n    \"level\": 0,\n    \"translation\": \"сделать\"\n  },\n  {\n    \"infinitive\": \"mean\",\n    \"simple\": \"meant\",\n    \"participle\": \"meant\",\n    \"level\": 0,\n    \"translation\": \"означать\"\n  },\n  {\n    \"infinitive\": \"meet\",\n    \"simple\": \"met\",\n    \"participle\": \"met\",\n    \"level\": 0,\n    \"translation\": \"встречаться\"\n  },\n  {\n    \"infinitive\": \"pay\",\n    \"simple\": \"paid\",\n    \"participle\": \"paid\",\n    \"level\": 0,\n    \"translation\": \"платить\"\n  },\n  {\n    \"infinitive\": \"put\",\n    \"simple\": \"put\",\n    \"participle\": \"put\",\n    \"level\": 0,\n    \"translation\": \"положить\"\n  },\n  {\n    \"infinitive\": \"read\",\n    \"simple\": \"read\",\n    \"participle\": \"read\",\n    \"level\": 0,\n    \"translation\": \"читать\"\n  },\n  {\n    \"infinitive\": \"ride\",\n    \"simple\": \"rode\",\n    \"participle\": \"ridden\",\n    \"level\": 0,\n    \"translation\": \"ездить\"\n  },\n  {\n    \"infinitive\": \"rise\",\n    \"simple\": \"rose\",\n    \"participle\": \"risen\",\n    \"level\": 0,\n    \"translation\": \"подниматься\"\n  },\n  {\n    \"infinitive\": \"run\",\n    \"simple\": \"ran\",\n    \"participle\": \"run\",\n    \"level\": 0,\n    \"translation\": \"бежать\"\n  },\n  {\n    \"infinitive\": \"say\",\n    \"simple\": \"said\",\n    \"participle\": \"said\",\n    \"level\": 0,\n    \"translation\": \"сказать\"\n  },\n  {\n    \"infinitive\": \"see\",\n    \"simple\": \"saw\",\n    \"participle\": \"seen\",\n    \"level\": 0,\n    \"translation\": \"видеть\"\n  },\n  {\n    \"infinitive\": \"sell\",\n    \"simple\": \"sold\",\n    \"participle\": \"sold\",\n    \"level\": 0,\n    \"translation\": \"продавать\"\n  },\n  {\n    \"infinitive\": \"send\",\n    \"simple\": \"sent\",\n    \"participle\": \"sent\",\n    \"level\": 0,\n    \"translation\": \"отправить\"\n  },\n  {\n    \"infinitive\": \"set\",\n    \"simple\": \"set\",\n    \"participle\": \"set\",\n    \"level\": 0,\n    \"translation\": \"установить\"\n  },\n  {\n    \"infinitive\": \"show\",\n    \"simple\": \"showed\",\n    \"participle\": \"shown\",\n    \"level\": 0,\n    \"translation\": \"показать\"\n  },\n  {\n    \"infinitive\": \"sing\",\n    \"simple\": \"sang\",\n    \"participle\": \"sung\",\n    \"level\": 0,\n    \"translation\": \"петь\"\n  },\n  {\n    \"infinitive\": \"sit\",\n    \"simple\": \"sat\",\n    \"participle\": \"sat\",\n    \"level\": 0,\n    \"translation\": \"сидеть\"\n  },\n  {\n    \"infinitive\": \"sleep\",\n    \"simple\": \"slept\",\n    \"participle\": \"slept\",\n    \"level\": 0,\n    \"translation\": \"спать\"\n  },\n  {\n    \"infinitive\": \"speak\",\n    \"simple\": \"spoke\",\n    \"participle\": \"spoken\",\n    \"level\": 0,\n    \"translation\": \"разговаривать\"\n  },\n  {\n    \"infinitive\": \"spend\",\n    \"simple\": \"spent\",\n    \"participle\": \"spent\",\n    \"level\": 0,\n    \"translation\": \"проводить\"\n  },\n  {\n    \"infinitive\": \"stand\",\n    \"simple\": \"stood\",\n    \"participle\": \"stood\",\n    \"level\": 0,\n    \"translation\": \"стоять\"\n  },\n  {\n    \"infinitive\": \"steal\",\n    \"simple\": \"stole\",\n    \"participle\": \"stolen\",\n    \"level\": 0,\n    \"translation\": \"украсть\"\n  },\n  {\n    \"infinitive\": \"swim\",\n    \"simple\": \"swam\",\n    \"participle\": \"swum\",\n    \"level\": 0,\n    \"translation\": \"плавать\"\n  },\n  {\n    \"infinitive\": \"take\",\n    \"simple\": \"took\",\n    \"participle\": \"taken\",\n    \"level\": 0,\n    \"translation\": \"взять\"\n  },\n  {\n    \"infinitive\": \"teach\",\n    \"simple\": \"taught\",\n    \"participle\": \"taught\",\n    \"level\": 0,\n    \"translation\": \"учить\"\n  },\n  {\n    \"infinitive\": \"tell\",\n    \"simple\": \"told\",\n    \"participle\": \"told\",\n    \"level\": 0,\n    \"translation\": \"рассказать\"\n  },\n  {\n    \"infinitive\": \"think\",\n    \"simple\": \"thought\",\n    \"participle\": \"thought\",\n    \"level\": 0,\n    \"translation\": \"считать\"\n  },\n  {\n    \"infinitive\": \"throw\",\n    \"simple\": \"threw\",\n    \"participle\": \"thrown\",\n    \"level\": 0,\n    \"translation\": \"бросить\"\n  },\n  {\n    \"infinitive\": \"understand\",\n    \"simple\": \"understood\",\n    \"participle\": \"understood\",\n    \"level\": 0,\n    \"translation\": \"понять\"\n  },\n  {\n    \"infinitive\": \"wear\",\n    \"simple\": \"wore\",\n    \"participle\": \"worn\",\n    \"level\": 0,\n    \"translation\": \"носить\"\n  },\n  {\n    \"infinitive\": \"win\",\n    \"simple\": \"won\",\n    \"participle\": \"won\",\n    \"level\": 0,\n    \"translation\": \"выиграть\"\n  },\n  {\n    \"infinitive\": \"write\",\n    \"simple\": \"wrote\",\n    \"participle\": \"written\",\n    \"level\": 0,\n    \"translation\": \"записывать\"\n  },\n];\n\nexport default IrregularVerbs;\n","import React, { useCallback } from \"react\";\nimport {\n  TextField,\n  Button,\n  Typography,\n  Grid,\n  ButtonGroup,\n  InputAdornment,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\nimport { Check, Refresh, Add } from \"@material-ui/icons\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport Dictionary, {\n  Levels,\n  LevelsDictionary,\n} from \"../../constants/irregularVerbs\";\n\nconst useDictionary = () => {\n  const ref = React.useRef([]);\n  return React.useMemo(() => {\n    const getUnusedIds = () => {\n      return Dictionary.map((_, index) => index).filter(\n        (id) => ref.current.indexOf(id) === -1\n      );\n    };\n    const get = () => {\n      const available = getUnusedIds();\n      if (available.length) {\n        const id = available[Math.floor(available.length * Math.random())];\n        ref.current.push(id);\n        return id;\n      }\n    };\n    return {\n      get,\n      getUnusedIds,\n      reset: () => {\n        ref.current = [];\n      },\n    };\n  }, []);\n};\n\nconst IrregularVerbs = () => {\n  const theme = useTheme();\n  const { register, handleSubmit, control, getValues, reset } = useForm({\n    reValidateMode: \"onSubmit\",\n  });\n  const { fields, append } = useFieldArray({\n    name: \"words\",\n    control,\n    keyName: \"fieldId\",\n  });\n\n  const dictionary = useDictionary();\n  const [level, setLevel] = React.useState(Levels.one);\n  const [fieldErrors, setFieldErrors] = React.useState([]);\n  const isSm = useMediaQuery(theme.breakpoints.down(\"sm\"));\n  const { length: amountUnusedVerbs } = dictionary.getUnusedIds();\n  const resetForm = useCallback(() => {\n    dictionary.reset();\n    setFieldErrors([]);\n    reset({\n      words: [...new Array(5)].map(() => ({ id: dictionary.get() })),\n    });\n  }, [reset, dictionary]);\n\n  const onSubmit = handleSubmit(() => {\n    const values = getValues();\n    if (values.words?.length) {\n      setFieldErrors(\n        values.words.map((word, index) => {\n          const {\n            [index]: { id },\n          } = fields;\n          return [\"simple\", \"participle\"].reduce((acc, t) => {\n            if (word[t]) {\n              acc[t] = word[t].toLowerCase().trim() !== Dictionary[id][t];\n            }\n            return acc;\n          }, {});\n        })\n      );\n    }\n  });\n\n  React.useEffect(() => {\n    resetForm();\n  }, [level, resetForm]);\n\n  React.useEffect(() => {\n    const callback = (e) => {\n      if (e.keyCode === 13) {\n        e.preventDefault();\n        onSubmit();\n      }\n    };\n    document.addEventListener(\"keypress\", callback);\n    return () => document.removeEventListener(\"keypress\", callback);\n  }, [onSubmit]);\n\n  const onAppend = () => {\n    append({ id: dictionary.get() }, false);\n  };\n\n  return (\n    <>\n      <Typography variant=\"h4\">Irregular Verbs</Typography>\n      <ButtonGroup size=\"large\" color=\"primary\" style={{ marginTop: 10 }}>\n        {[...LevelsDictionary.entries()].map(([id, { name }]) => {\n          return (\n            <Button\n              disabled={id === level}\n              onClick={() => setLevel(id)}\n              key={id}\n            >\n              Level {name}\n            </Button>\n          );\n        })}\n      </ButtonGroup>\n      <Grid container alignItems=\"flex-start\">\n        <Grid item md={10} xs={12}>\n          <Grid\n            container\n            direction={isSm ? \"column\" : \"row\"}\n            alignItems=\"flex-start\"\n            spacing={2}\n            style={{ marginTop: 15 }}\n          >\n            <Grid item md={6}>\n              <Grid\n                container\n                direction=\"row\"\n                justify=\"flex-start\"\n                alignItems=\"center\"\n                spacing={2}\n                style={{ marginBottom: 10 }}\n              >\n                <Grid\n                  item\n                  xs={6}\n                  style={{ textAlign: \"right\", paddingBottom: 0 }}\n                >\n                  <Typography variant=\"body1\">Past simple</Typography>\n                </Grid>\n                <Grid\n                  item\n                  xs={6}\n                  style={{ textAlign: \"right\", paddingBottom: 0 }}\n                >\n                  <Typography variant=\"body1\">Past participle</Typography>\n                </Grid>\n                {fields?.map((field, index) => {\n                  const verb = Dictionary[field.id];\n                  return verb === undefined\n                    ? null\n                    : [\"simple\", \"participle\"].map((type, typeIndex) => {\n                        const error = fieldErrors[index]?.[type];\n                        return (\n                          <Grid\n                            item\n                            xs={6}\n                            title={verb.translation}\n                            key={`${field.fieldId}_${type}`}\n                          >\n                            <TextField\n                              name={`words[${index}].${type}`}\n                              label={typeIndex === 0 ? verb.infinitive : null}\n                              variant=\"outlined\"\n                              error={error}\n                              inputRef={register}\n                              fullWidth\n                              size=\"small\"\n                              disabled={error === false}\n                              autoComplete=\"off\"\n                              InputProps={{\n                                endAdornment:\n                                  error === false ? (\n                                    <InputAdornment position=\"end\">\n                                      <Check />\n                                    </InputAdornment>\n                                  ) : null,\n                              }}\n                            />\n                          </Grid>\n                        );\n                      });\n                })}\n              </Grid>\n            </Grid>\n            <Grid\n              item\n              md={4}\n              style={{\n                background: \"white\",\n                zIndex: 10,\n                ...(isSm\n                  ? { position: \"fixed\", bottom: 10 }\n                  : { position: \"sticky\", top: 10 }),\n              }}\n            >\n              <ButtonGroup size=\"large\" variant=\"contained\" color=\"secondary\">\n                <Button onClick={onSubmit}>\n                  <Check />\n                </Button>\n                <Button onClick={resetForm}>\n                  <Refresh />\n                </Button>\n                <Button onClick={onAppend} disabled={amountUnusedVerbs === 0}>\n                  <Add />\n                </Button>\n              </ButtonGroup>\n              {!isSm ? (\n                <div style={{ marginTop: 10 }}>\n                  <Typography variant=\"body1\">\n                    * You can press <b>'Enter'</b> to check\n                  </Typography>\n                  <Typography variant=\"body1\">\n                    * You can hover over the inputs and see <b>translation</b>\n                  </Typography>\n                </div>\n              ) : null}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default IrregularVerbs;\n","import React from \"react\";\nimport { HashRouter, Switch, Route } from \"react-router-dom\";\nimport IrregularVerbs from \"./views/IrregularVerbs\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path=\"/irregular-verbs\" component={IrregularVerbs} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}